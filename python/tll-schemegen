#!/usr/bin/env python3
# vim: sts=4 sw=4 et

import tll.scheme as S

import argparse
import os
import pathlib
import shutil
import sys
import tempfile
import pkg_resources

def safe_write(filename, data):
    p = pathlib.Path(filename)
    dest, name = tempfile.mkstemp(dir=p.parent, prefix=p.name)

    try:
        os.write(dest, data)
        os.close(dest)
        shutil.move(name, p)
    except:
        os.unlink(name)

parser = argparse.ArgumentParser(description='Generate source code from scheme')
parser.add_argument('scheme', metavar='SCHEME', type=str,
                    help='scheme file')
parser.add_argument('-f', '--format', dest='format', type=str,
                    default='cpp',
                    help='template to use')
parser.add_argument('-o', '--output', dest='output', type=str,
                    help='output file, defaults to stdout')
parser.add_argument('-T', '--template-dir', dest='template_dir', action='append',
                    default=[],
                    help='additional template directories')
parser.add_argument('--namespace', dest='namespace', type=str,
                    help='C++ namespace name for generated source')

args = parser.parse_args()

from mako.lookup import TemplateLookup
#from mako.template import Template
#tmpl = Template(filename=f"{args.template}.mako")

lookup = TemplateLookup(args.template_dir + [pkg_resources.resource_filename('tll', 'templates')], input_encoding='utf-8', output_encoding='utf-8')
tmpl = lookup.get_template(args.format + '.mako')

class Options(object): pass
options = Options()
options.msgid = 'msgid'
options.namespace = args.namespace

scheme = S.Scheme('yaml://' + args.scheme)
data = tmpl.render(S = S, scheme=scheme, options=options)

if args.output in (None, '-'):
    sys.stdout.buffer.write(data)
else:
    safe_write(args.output, data)
